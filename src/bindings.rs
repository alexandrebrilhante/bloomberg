/* automatically generated by rust-bindgen */

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const BLPAPI_CORRELATION_TYPE_UNSET: u32 = 0;
pub const BLPAPI_CORRELATION_TYPE_INT: u32 = 1;
pub const BLPAPI_CORRELATION_TYPE_POINTER: u32 = 2;
pub const BLPAPI_CORRELATION_TYPE_AUTOGEN: u32 = 3;
pub const BLPAPI_CORRELATION_MAX_CLASS_ID: u32 = 65535;
pub const BLPAPI_MANAGEDPTR_COPY: u32 = 1;
pub const BLPAPI_MANAGEDPTR_DESTROY: i32 = -1;
pub const BLPAPI_MANAGEDPTR_IMPOSSIBLE_OPERATION: u32 = 0;
pub const BLPAPI_DATETIME_YEAR_PART: u32 = 1;
pub const BLPAPI_DATETIME_MONTH_PART: u32 = 2;
pub const BLPAPI_DATETIME_DAY_PART: u32 = 4;
pub const BLPAPI_DATETIME_OFFSET_PART: u32 = 8;
pub const BLPAPI_DATETIME_HOURS_PART: u32 = 16;
pub const BLPAPI_DATETIME_MINUTES_PART: u32 = 32;
pub const BLPAPI_DATETIME_SECONDS_PART: u32 = 64;
pub const BLPAPI_DATETIME_MILLISECONDS_PART: u32 = 128;
pub const BLPAPI_DATETIME_FRACSECONDS_PART: u32 = 128;
pub const BLPAPI_DATETIME_DATE_PART: u32 = 7;
pub const BLPAPI_DATETIME_TIME_PART: u32 = 112;
pub const BLPAPI_DATETIME_TIMEMILLI_PART: u32 = 240;
pub const BLPAPI_DATETIME_TIMEFRACSECONDS_PART: u32 = 240;
pub const BLPAPI_EVENTTYPE_ADMIN: u32 = 1;
pub const BLPAPI_EVENTTYPE_SESSION_STATUS: u32 = 2;
pub const BLPAPI_EVENTTYPE_SUBSCRIPTION_STATUS: u32 = 3;
pub const BLPAPI_EVENTTYPE_REQUEST_STATUS: u32 = 4;
pub const BLPAPI_EVENTTYPE_RESPONSE: u32 = 5;
pub const BLPAPI_EVENTTYPE_PARTIAL_RESPONSE: u32 = 6;
pub const BLPAPI_EVENTTYPE_SUBSCRIPTION_DATA: u32 = 8;
pub const BLPAPI_EVENTTYPE_SERVICE_STATUS: u32 = 9;
pub const BLPAPI_EVENTTYPE_TIMEOUT: u32 = 10;
pub const BLPAPI_EVENTTYPE_AUTHORIZATION_STATUS: u32 = 11;
pub const BLPAPI_EVENTTYPE_RESOLUTION_STATUS: u32 = 12;
pub const BLPAPI_EVENTTYPE_TOPIC_STATUS: u32 = 13;
pub const BLPAPI_EVENTTYPE_TOKEN_STATUS: u32 = 14;
pub const BLPAPI_EVENTTYPE_REQUEST: u32 = 15;
pub const BLPAPI_ELEMENT_INDEX_END: u32 = 4294967295;
pub const BLPAPI_STATUS_ACTIVE: u32 = 0;
pub const BLPAPI_STATUS_DEPRECATED: u32 = 1;
pub const BLPAPI_STATUS_INACTIVE: u32 = 2;
pub const BLPAPI_STATUS_PENDING_DEPRECATION: u32 = 3;
pub const BLPAPI_SUBSCRIPTIONSTATUS_UNSUBSCRIBED: u32 = 0;
pub const BLPAPI_SUBSCRIPTIONSTATUS_SUBSCRIBING: u32 = 1;
pub const BLPAPI_SUBSCRIPTIONSTATUS_SUBSCRIBED: u32 = 2;
pub const BLPAPI_SUBSCRIPTIONSTATUS_CANCELLED: u32 = 3;
pub const BLPAPI_SUBSCRIPTIONSTATUS_PENDING_CANCELLATION: u32 = 4;
pub const BLPAPI_CLIENTMODE_AUTO: u32 = 0;
pub const BLPAPI_CLIENTMODE_DAPI: u32 = 1;
pub const BLPAPI_CLIENTMODE_SAPI: u32 = 2;
pub const BLPAPI_CLIENTMODE_COMPAT_33X: u32 = 16;
pub const BLPAPI_ELEMENTDEFINITION_UNBOUNDED: i32 = -1;
pub const BLPAPI_RESOLVEMODE_DONT_REGISTER_SERVICES: u32 = 0;
pub const BLPAPI_RESOLVEMODE_AUTO_REGISTER_SERVICES: u32 = 1;
pub const BLPAPI_SEATTYPE_INVALID_SEAT: i32 = -1;
pub const BLPAPI_SEATTYPE_BPS: u32 = 0;
pub const BLPAPI_SEATTYPE_NONBPS: u32 = 1;
pub const BLPAPI_SERVICEREGISTRATIONOPTIONS_PRIORITY_LOW: u32 = 0;
pub const BLPAPI_SERVICEREGISTRATIONOPTIONS_PRIORITY_MEDIUM: u32 = 1073741823;
pub const BLPAPI_SERVICEREGISTRATIONOPTIONS_PRIORITY_HIGH: u32 = 2147483647;
pub const BLPAPI_REGISTRATIONPARTS_DEFAULT: u32 = 1;
pub const BLPAPI_REGISTRATIONPARTS_PUBLISHING: u32 = 2;
pub const BLPAPI_REGISTRATIONPARTS_OPERATIONS: u32 = 4;
pub const BLPAPI_REGISTRATIONPARTS_SUBSCRIBER_RESOLUTION: u32 = 8;
pub const BLPAPI_REGISTRATIONPARTS_PUBLISHER_RESOLUTION: u32 = 16;
pub const BLPAPI_TOPICLIST_NOT_CREATED: u32 = 0;
pub const BLPAPI_TOPICLIST_CREATED: u32 = 1;
pub const BLPAPI_TOPICLIST_FAILURE: u32 = 2;
pub const BLPAPI_RESOLUTIONLIST_UNRESOLVED: u32 = 0;
pub const BLPAPI_RESOLUTIONLIST_RESOLVED: u32 = 1;
pub const BLPAPI_RESOLUTIONLIST_RESOLUTION_FAILURE_BAD_SERVICE: u32 = 2;
pub const BLPAPI_RESOLUTIONLIST_RESOLUTION_FAILURE_SERVICE_AUTHORIZATION_FAILED: u32 = 3;
pub const BLPAPI_RESOLUTIONLIST_RESOLUTION_FAILURE_BAD_TOPIC: u32 = 4;
pub const BLPAPI_RESOLUTIONLIST_RESOLUTION_FAILURE_TOPIC_AUTHORIZATION_FAILED: u32 = 5;
pub const BLPAPI_MESSAGE_FRAGMENT_NONE: u32 = 0;
pub const BLPAPI_MESSAGE_FRAGMENT_START: u32 = 1;
pub const BLPAPI_MESSAGE_FRAGMENT_INTERMEDIATE: u32 = 2;
pub const BLPAPI_MESSAGE_FRAGMENT_END: u32 = 3;
pub const BLPAPI_MESSAGE_RECAPTYPE_NONE: u32 = 0;
pub const BLPAPI_MESSAGE_RECAPTYPE_SOLICITED: u32 = 1;
pub const BLPAPI_MESSAGE_RECAPTYPE_UNSOLICITED: u32 = 2;
pub const BLPAPI_UNKNOWN_CLASS: u32 = 0;
pub const BLPAPI_INVALIDSTATE_CLASS: u32 = 65536;
pub const BLPAPI_INVALIDARG_CLASS: u32 = 131072;
pub const BLPAPI_IOERROR_CLASS: u32 = 196608;
pub const BLPAPI_CNVERROR_CLASS: u32 = 262144;
pub const BLPAPI_BOUNDSERROR_CLASS: u32 = 327680;
pub const BLPAPI_NOTFOUND_CLASS: u32 = 393216;
pub const BLPAPI_FLDNOTFOUND_CLASS: u32 = 458752;
pub const BLPAPI_UNSUPPORTED_CLASS: u32 = 524288;
pub const BLPAPI_ERROR_UNKNOWN: u32 = 1;
pub const BLPAPI_ERROR_ILLEGAL_ARG: u32 = 131074;
pub const BLPAPI_ERROR_ILLEGAL_ACCESS: u32 = 3;
pub const BLPAPI_ERROR_INVALID_SESSION: u32 = 131076;
pub const BLPAPI_ERROR_DUPLICATE_CORRELATIONID: u32 = 131077;
pub const BLPAPI_ERROR_INTERNAL_ERROR: u32 = 6;
pub const BLPAPI_ERROR_RESOLVE_FAILED: u32 = 196615;
pub const BLPAPI_ERROR_CONNECT_FAILED: u32 = 196616;
pub const BLPAPI_ERROR_ILLEGAL_STATE: u32 = 65545;
pub const BLPAPI_ERROR_CODEC_FAILURE: u32 = 10;
pub const BLPAPI_ERROR_INDEX_OUT_OF_RANGE: u32 = 327691;
pub const BLPAPI_ERROR_INVALID_CONVERSION: u32 = 262156;
pub const BLPAPI_ERROR_ITEM_NOT_FOUND: u32 = 393229;
pub const BLPAPI_ERROR_IO_ERROR: u32 = 196622;
pub const BLPAPI_ERROR_CORRELATION_NOT_FOUND: u32 = 393231;
pub const BLPAPI_ERROR_SERVICE_NOT_FOUND: u32 = 393232;
pub const BLPAPI_ERROR_LOGON_LOOKUP_FAILED: u32 = 17;
pub const BLPAPI_ERROR_DS_LOOKUP_FAILED: u32 = 18;
pub const BLPAPI_ERROR_UNSUPPORTED_OPERATION: u32 = 524307;
pub const BLPAPI_ERROR_DS_PROPERTY_NOT_FOUND: u32 = 393236;
pub const BLPAPI_VERSION_MAJOR: u32 = 3;
pub const BLPAPI_VERSION_MINOR: u32 = 12;
pub const BLPAPI_VERSION_PATCH: u32 = 3;
pub const BLPAPI_VERSION_BUILD: u32 = 1;
pub type blpapi_Bool_t = ::std::os::raw::c_int;
pub type blpapi_Char_t = ::std::os::raw::c_char;
pub type blpapi_UChar_t = ::std::os::raw::c_uchar;
pub type blpapi_Int16_t = ::std::os::raw::c_short;
pub type blpapi_UInt16_t = ::std::os::raw::c_ushort;
pub type blpapi_Int32_t = ::std::os::raw::c_int;
pub type blpapi_UInt32_t = ::std::os::raw::c_uint;
pub type blpapi_Int64_t = ::std::os::raw::c_longlong;
pub type blpapi_UInt64_t = ::std::os::raw::c_ulonglong;
pub type blpapi_Float32_t = f32;
pub type blpapi_Float64_t = f64;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_BOOL: blpapi_DataType_t = 1;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_CHAR: blpapi_DataType_t = 2;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_BYTE: blpapi_DataType_t = 3;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_INT32: blpapi_DataType_t = 4;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_INT64: blpapi_DataType_t = 5;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_FLOAT32: blpapi_DataType_t = 6;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_FLOAT64: blpapi_DataType_t = 7;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_STRING: blpapi_DataType_t = 8;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_BYTEARRAY: blpapi_DataType_t = 9;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_DATE: blpapi_DataType_t = 10;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_TIME: blpapi_DataType_t = 11;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_DECIMAL: blpapi_DataType_t = 12;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_DATETIME: blpapi_DataType_t = 13;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_ENUMERATION: blpapi_DataType_t = 14;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_SEQUENCE: blpapi_DataType_t = 15;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_CHOICE: blpapi_DataType_t = 16;
pub const blpapi_DataType_t_BLPAPI_DATATYPE_CORRELATION_ID: blpapi_DataType_t = 17;
pub type blpapi_DataType_t = i32;
pub const blpapi_Logging_Severity_t_blpapi_Logging_SEVERITY_OFF: blpapi_Logging_Severity_t = 0;
pub const blpapi_Logging_Severity_t_blpapi_Logging_SEVERITY_FATAL: blpapi_Logging_Severity_t = 1;
pub const blpapi_Logging_Severity_t_blpapi_Logging_SEVERITY_ERROR: blpapi_Logging_Severity_t = 2;
pub const blpapi_Logging_Severity_t_blpapi_Logging_SEVERITY_WARN: blpapi_Logging_Severity_t = 3;
pub const blpapi_Logging_Severity_t_blpapi_Logging_SEVERITY_INFO: blpapi_Logging_Severity_t = 4;
pub const blpapi_Logging_Severity_t_blpapi_Logging_SEVERITY_DEBUG: blpapi_Logging_Severity_t = 5;
pub const blpapi_Logging_Severity_t_blpapi_Logging_SEVERITY_TRACE: blpapi_Logging_Severity_t = 6;
pub type blpapi_Logging_Severity_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_AbstractSession {
    _unused: [u8; 0],
}
pub type blpapi_AbstractSession_t = blpapi_AbstractSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Constant {
    _unused: [u8; 0],
}
pub type blpapi_Constant_t = blpapi_Constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_ConstantList {
    _unused: [u8; 0],
}
pub type blpapi_ConstantList_t = blpapi_ConstantList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Element {
    _unused: [u8; 0],
}
pub type blpapi_Element_t = blpapi_Element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Event {
    _unused: [u8; 0],
}
pub type blpapi_Event_t = blpapi_Event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_EventDispatcher {
    _unused: [u8; 0],
}
pub type blpapi_EventDispatcher_t = blpapi_EventDispatcher;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_EventFormatter {
    _unused: [u8; 0],
}
pub type blpapi_EventFormatter_t = blpapi_EventFormatter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_EventQueue {
    _unused: [u8; 0],
}
pub type blpapi_EventQueue_t = blpapi_EventQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_MessageIterator {
    _unused: [u8; 0],
}
pub type blpapi_MessageIterator_t = blpapi_MessageIterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Name {
    _unused: [u8; 0],
}
pub type blpapi_Name_t = blpapi_Name;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Operation {
    _unused: [u8; 0],
}
pub type blpapi_Operation_t = blpapi_Operation;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_ProviderSession {
    _unused: [u8; 0],
}
pub type blpapi_ProviderSession_t = blpapi_ProviderSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_RequestTemplate {
    _unused: [u8; 0],
}
pub type blpapi_RequestTemplate_t = blpapi_RequestTemplate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Service {
    _unused: [u8; 0],
}
pub type blpapi_Service_t = blpapi_Service;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Session {
    _unused: [u8; 0],
}
pub type blpapi_Session_t = blpapi_Session;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_SessionOptions {
    _unused: [u8; 0],
}
pub type blpapi_SessionOptions_t = blpapi_SessionOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_TlsOptions {
    _unused: [u8; 0],
}
pub type blpapi_TlsOptions_t = blpapi_TlsOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_SubscriptionItrerator {
    _unused: [u8; 0],
}
pub type blpapi_SubscriptionIterator_t = blpapi_SubscriptionItrerator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Identity {
    _unused: [u8; 0],
}
pub type blpapi_UserHandle = blpapi_Identity;
pub type blpapi_UserHandle_t = blpapi_Identity;
pub type blpapi_Identity_t = blpapi_Identity;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type blpapi_ManagedPtr_t = blpapi_ManagedPtr_t_;
pub type blpapi_ManagedPtr_ManagerFunction_t = ::std::option::Option<
    unsafe extern "C" fn(
        managedPtr: *mut blpapi_ManagedPtr_t,
        srcPtr: *const blpapi_ManagedPtr_t,
        operation: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub union blpapi_ManagedPtr_t_data_ {
    pub intValue: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_blpapi_ManagedPtr_t_data_() {
    assert_eq!(
        ::std::mem::size_of::<blpapi_ManagedPtr_t_data_>(),
        8usize,
        concat!("Size of: ", stringify!(blpapi_ManagedPtr_t_data_))
    );
    assert_eq!(
        ::std::mem::align_of::<blpapi_ManagedPtr_t_data_>(),
        8usize,
        concat!("Alignment of ", stringify!(blpapi_ManagedPtr_t_data_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<blpapi_ManagedPtr_t_data_>())).intValue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_ManagedPtr_t_data_),
            "::",
            stringify!(intValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_ManagedPtr_t_data_>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_ManagedPtr_t_data_),
            "::",
            stringify!(ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blpapi_ManagedPtr_t_ {
    pub pointer: *mut ::std::os::raw::c_void,
    pub userData: [blpapi_ManagedPtr_t_data_; 4usize],
    pub manager: blpapi_ManagedPtr_ManagerFunction_t,
}
#[test]
fn bindgen_test_layout_blpapi_ManagedPtr_t_() {
    assert_eq!(
        ::std::mem::size_of::<blpapi_ManagedPtr_t_>(),
        48usize,
        concat!("Size of: ", stringify!(blpapi_ManagedPtr_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<blpapi_ManagedPtr_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(blpapi_ManagedPtr_t_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_ManagedPtr_t_>())).pointer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_ManagedPtr_t_),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_ManagedPtr_t_>())).userData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_ManagedPtr_t_),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_ManagedPtr_t_>())).manager as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_ManagedPtr_t_),
            "::",
            stringify!(manager)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blpapi_CorrelationId_t_ {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub value: blpapi_CorrelationId_t___bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union blpapi_CorrelationId_t___bindgen_ty_1 {
    pub intValue: blpapi_UInt64_t,
    pub ptrValue: blpapi_ManagedPtr_t,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_blpapi_CorrelationId_t___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<blpapi_CorrelationId_t___bindgen_ty_1>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(blpapi_CorrelationId_t___bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<blpapi_CorrelationId_t___bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(blpapi_CorrelationId_t___bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<blpapi_CorrelationId_t___bindgen_ty_1>())).intValue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_CorrelationId_t___bindgen_ty_1),
            "::",
            stringify!(intValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<blpapi_CorrelationId_t___bindgen_ty_1>())).ptrValue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_CorrelationId_t___bindgen_ty_1),
            "::",
            stringify!(ptrValue)
        )
    );
}
#[test]
fn bindgen_test_layout_blpapi_CorrelationId_t_() {
    assert_eq!(
        ::std::mem::size_of::<blpapi_CorrelationId_t_>(),
        56usize,
        concat!("Size of: ", stringify!(blpapi_CorrelationId_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<blpapi_CorrelationId_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(blpapi_CorrelationId_t_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_CorrelationId_t_>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_CorrelationId_t_),
            "::",
            stringify!(value)
        )
    );
}
impl blpapi_CorrelationId_t_ {
    #[inline]
    pub fn size(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_size(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn valueType(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_valueType(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn classId(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_classId(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        size: ::std::os::raw::c_uint,
        valueType: ::std::os::raw::c_uint,
        classId: ::std::os::raw::c_uint,
        reserved: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let size: u32 = unsafe { ::std::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let valueType: u32 = unsafe { ::std::mem::transmute(valueType) };
            valueType as u64
        });
        __bindgen_bitfield_unit.set(12usize, 16u8, {
            let classId: u32 = unsafe { ::std::mem::transmute(classId) };
            classId as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type blpapi_CorrelationId_t = blpapi_CorrelationId_t_;
pub type max_align_t = f64;
extern "C" {
    pub fn blpapi_Name_create(nameString: *const ::std::os::raw::c_char) -> *mut blpapi_Name_t;
}
extern "C" {
    pub fn blpapi_Name_destroy(name: *mut blpapi_Name_t);
}
extern "C" {
    pub fn blpapi_Name_duplicate(src: *const blpapi_Name_t) -> *mut blpapi_Name_t;
}
extern "C" {
    pub fn blpapi_Name_equalsStr(
        name: *const blpapi_Name_t,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Name_string(name: *const blpapi_Name_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_Name_length(name: *const blpapi_Name_t) -> usize;
}
extern "C" {
    pub fn blpapi_Name_findName(nameString: *const ::std::os::raw::c_char) -> *mut blpapi_Name_t;
}
extern "C" {
    pub fn blpapi_getLastErrorDescription(
        resultCode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blpapi_ErrorInfo {
    pub exceptionClass: ::std::os::raw::c_int,
    pub description: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_blpapi_ErrorInfo() {
    assert_eq!(
        ::std::mem::size_of::<blpapi_ErrorInfo>(),
        260usize,
        concat!("Size of: ", stringify!(blpapi_ErrorInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<blpapi_ErrorInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(blpapi_ErrorInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_ErrorInfo>())).exceptionClass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_ErrorInfo),
            "::",
            stringify!(exceptionClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_ErrorInfo>())).description as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_ErrorInfo),
            "::",
            stringify!(description)
        )
    );
}
pub type blpapi_ErrorInfo_t = blpapi_ErrorInfo;
extern "C" {
    pub fn blpapi_getErrorInfo(
        buffer: *mut blpapi_ErrorInfo_t,
        errorCode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type blpapi_StreamWriter_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        stream: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_TimePoint {
    pub d_value: blpapi_Int64_t,
}
#[test]
fn bindgen_test_layout_blpapi_TimePoint() {
    assert_eq!(
        ::std::mem::size_of::<blpapi_TimePoint>(),
        8usize,
        concat!("Size of: ", stringify!(blpapi_TimePoint))
    );
    assert_eq!(
        ::std::mem::align_of::<blpapi_TimePoint>(),
        8usize,
        concat!("Alignment of ", stringify!(blpapi_TimePoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_TimePoint>())).d_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_TimePoint),
            "::",
            stringify!(d_value)
        )
    );
}
pub type blpapi_TimePoint_t = blpapi_TimePoint;
extern "C" {
    pub fn blpapi_TimePointUtil_nanosecondsBetween(
        start: *const blpapi_TimePoint_t,
        end: *const blpapi_TimePoint_t,
    ) -> ::std::os::raw::c_longlong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Datetime_tag {
    pub parts: blpapi_UChar_t,
    pub hours: blpapi_UChar_t,
    pub minutes: blpapi_UChar_t,
    pub seconds: blpapi_UChar_t,
    pub milliSeconds: blpapi_UInt16_t,
    pub month: blpapi_UChar_t,
    pub day: blpapi_UChar_t,
    pub year: blpapi_UInt16_t,
    pub offset: blpapi_Int16_t,
}
#[test]
fn bindgen_test_layout_blpapi_Datetime_tag() {
    assert_eq!(
        ::std::mem::size_of::<blpapi_Datetime_tag>(),
        12usize,
        concat!("Size of: ", stringify!(blpapi_Datetime_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<blpapi_Datetime_tag>(),
        2usize,
        concat!("Alignment of ", stringify!(blpapi_Datetime_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_Datetime_tag>())).parts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_Datetime_tag),
            "::",
            stringify!(parts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_Datetime_tag>())).hours as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_Datetime_tag),
            "::",
            stringify!(hours)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_Datetime_tag>())).minutes as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_Datetime_tag),
            "::",
            stringify!(minutes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_Datetime_tag>())).seconds as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_Datetime_tag),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<blpapi_Datetime_tag>())).milliSeconds as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_Datetime_tag),
            "::",
            stringify!(milliSeconds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_Datetime_tag>())).month as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_Datetime_tag),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_Datetime_tag>())).day as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_Datetime_tag),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_Datetime_tag>())).year as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_Datetime_tag),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blpapi_Datetime_tag>())).offset as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_Datetime_tag),
            "::",
            stringify!(offset)
        )
    );
}
pub type blpapi_Datetime_t = blpapi_Datetime_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_HighPrecisionDatetime_tag {
    pub datetime: blpapi_Datetime_t,
    pub picoseconds: blpapi_UInt32_t,
}
#[test]
fn bindgen_test_layout_blpapi_HighPrecisionDatetime_tag() {
    assert_eq!(
        ::std::mem::size_of::<blpapi_HighPrecisionDatetime_tag>(),
        16usize,
        concat!("Size of: ", stringify!(blpapi_HighPrecisionDatetime_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<blpapi_HighPrecisionDatetime_tag>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(blpapi_HighPrecisionDatetime_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<blpapi_HighPrecisionDatetime_tag>())).datetime as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_HighPrecisionDatetime_tag),
            "::",
            stringify!(datetime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<blpapi_HighPrecisionDatetime_tag>())).picoseconds as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(blpapi_HighPrecisionDatetime_tag),
            "::",
            stringify!(picoseconds)
        )
    );
}
pub type blpapi_HighPrecisionDatetime_t = blpapi_HighPrecisionDatetime_tag;
extern "C" {
    pub fn blpapi_Datetime_compare(
        lhs: blpapi_Datetime_t,
        rhs: blpapi_Datetime_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Datetime_print(
        datetime: *const blpapi_Datetime_t,
        streamWriter: blpapi_StreamWriter_t,
        stream: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        spacesPerLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_HighPrecisionDatetime_compare(
        lhs: *const blpapi_HighPrecisionDatetime_t,
        rhs: *const blpapi_HighPrecisionDatetime_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_HighPrecisionDatetime_print(
        datetime: *const blpapi_HighPrecisionDatetime_t,
        streamWriter: blpapi_StreamWriter_t,
        stream: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        spacesPerLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_HighPrecisionDatetime_fromTimePoint(
        datetime: *mut blpapi_HighPrecisionDatetime_t,
        timePoint: *const blpapi_TimePoint_t,
        offset: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Constant_setUserData(
        constant: *mut blpapi_Constant_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn blpapi_Constant_name(constant: *const blpapi_Constant_t) -> *mut blpapi_Name_t;
}
extern "C" {
    pub fn blpapi_Constant_description(
        constant: *const blpapi_Constant_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_Constant_status(constant: *const blpapi_Constant_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Constant_datatype(constant: *const blpapi_Constant_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Constant_getValueAsChar(
        constant: *const blpapi_Constant_t,
        buffer: *mut blpapi_Char_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Constant_getValueAsInt32(
        constant: *const blpapi_Constant_t,
        buffer: *mut blpapi_Int32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Constant_getValueAsInt64(
        constant: *const blpapi_Constant_t,
        buffer: *mut blpapi_Int64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Constant_getValueAsFloat32(
        constant: *const blpapi_Constant_t,
        buffer: *mut blpapi_Float32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Constant_getValueAsFloat64(
        constant: *const blpapi_Constant_t,
        buffer: *mut blpapi_Float64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Constant_getValueAsDatetime(
        constant: *const blpapi_Constant_t,
        buffer: *mut blpapi_Datetime_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Constant_getValueAsString(
        constant: *const blpapi_Constant_t,
        buffer: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Constant_userData(
        constant: *const blpapi_Constant_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn blpapi_ConstantList_setUserData(
        constant: *mut blpapi_ConstantList_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn blpapi_ConstantList_name(list: *const blpapi_ConstantList_t) -> *mut blpapi_Name_t;
}
extern "C" {
    pub fn blpapi_ConstantList_description(
        list: *const blpapi_ConstantList_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_ConstantList_numConstants(
        list: *const blpapi_ConstantList_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ConstantList_datatype(
        constant: *const blpapi_ConstantList_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ConstantList_status(list: *const blpapi_ConstantList_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ConstantList_getConstant(
        constant: *const blpapi_ConstantList_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
    ) -> *mut blpapi_Constant_t;
}
extern "C" {
    pub fn blpapi_ConstantList_getConstantAt(
        constant: *const blpapi_ConstantList_t,
        index: usize,
    ) -> *mut blpapi_Constant_t;
}
extern "C" {
    pub fn blpapi_ConstantList_userData(
        constant: *const blpapi_ConstantList_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type blpapi_SchemaElementDefinition_t = *mut ::std::os::raw::c_void;
pub type blpapi_SchemaTypeDefinition_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn blpapi_SchemaElementDefinition_name(
        field: *const blpapi_SchemaElementDefinition_t,
    ) -> *mut blpapi_Name_t;
}
extern "C" {
    pub fn blpapi_SchemaElementDefinition_description(
        field: *const blpapi_SchemaElementDefinition_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_SchemaElementDefinition_status(
        field: *const blpapi_SchemaElementDefinition_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SchemaElementDefinition_type(
        field: *const blpapi_SchemaElementDefinition_t,
    ) -> *mut blpapi_SchemaTypeDefinition_t;
}
extern "C" {
    pub fn blpapi_SchemaElementDefinition_numAlternateNames(
        field: *const blpapi_SchemaElementDefinition_t,
    ) -> usize;
}
extern "C" {
    pub fn blpapi_SchemaElementDefinition_getAlternateName(
        field: *const blpapi_SchemaElementDefinition_t,
        index: usize,
    ) -> *mut blpapi_Name_t;
}
extern "C" {
    pub fn blpapi_SchemaElementDefinition_minValues(
        field: *const blpapi_SchemaElementDefinition_t,
    ) -> usize;
}
extern "C" {
    pub fn blpapi_SchemaElementDefinition_maxValues(
        field: *const blpapi_SchemaElementDefinition_t,
    ) -> usize;
}
extern "C" {
    pub fn blpapi_SchemaElementDefinition_print(
        element: *const blpapi_SchemaElementDefinition_t,
        streamWriter: blpapi_StreamWriter_t,
        userStream: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        spacesPerLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SchemaElementDefinition_setUserData(
        field: *mut blpapi_SchemaElementDefinition_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn blpapi_SchemaElementDefinition_userData(
        field: *const blpapi_SchemaElementDefinition_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_name(
        type_: *const blpapi_SchemaTypeDefinition_t,
    ) -> *mut blpapi_Name_t;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_description(
        type_: *const blpapi_SchemaTypeDefinition_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_status(
        type_: *const blpapi_SchemaTypeDefinition_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_datatype(
        type_: *const blpapi_SchemaTypeDefinition_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_isComplexType(
        type_: *const blpapi_SchemaTypeDefinition_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_isSimpleType(
        type_: *const blpapi_SchemaTypeDefinition_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_isEnumerationType(
        type_: *const blpapi_SchemaTypeDefinition_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_isComplex(
        type_: *const blpapi_SchemaTypeDefinition_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_isSimple(
        type_: *const blpapi_SchemaTypeDefinition_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_isEnumeration(
        type_: *const blpapi_SchemaTypeDefinition_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_numElementDefinitions(
        type_: *const blpapi_SchemaTypeDefinition_t,
    ) -> usize;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_getElementDefinition(
        type_: *const blpapi_SchemaTypeDefinition_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
    ) -> *mut blpapi_SchemaElementDefinition_t;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_getElementDefinitionAt(
        type_: *const blpapi_SchemaTypeDefinition_t,
        index: usize,
    ) -> *mut blpapi_SchemaElementDefinition_t;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_print(
        element: *const blpapi_SchemaTypeDefinition_t,
        streamWriter: blpapi_StreamWriter_t,
        userStream: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        spacesPerLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_setUserData(
        element: *mut blpapi_SchemaTypeDefinition_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_userData(
        element: *const blpapi_SchemaTypeDefinition_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn blpapi_SchemaTypeDefinition_enumeration(
        element: *const blpapi_SchemaTypeDefinition_t,
    ) -> *mut blpapi_ConstantList_t;
}
extern "C" {
    pub fn blpapi_Element_name(element: *const blpapi_Element_t) -> *mut blpapi_Name_t;
}
extern "C" {
    pub fn blpapi_Element_nameString(
        element: *const blpapi_Element_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_Element_definition(
        element: *const blpapi_Element_t,
    ) -> *mut blpapi_SchemaElementDefinition_t;
}
extern "C" {
    pub fn blpapi_Element_datatype(element: *const blpapi_Element_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_isComplexType(element: *const blpapi_Element_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_isArray(element: *const blpapi_Element_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_isReadOnly(element: *const blpapi_Element_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_numValues(element: *const blpapi_Element_t) -> usize;
}
extern "C" {
    pub fn blpapi_Element_numElements(element: *const blpapi_Element_t) -> usize;
}
extern "C" {
    pub fn blpapi_Element_isNullValue(
        element: *const blpapi_Element_t,
        position: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_isNull(element: *const blpapi_Element_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_print(
        element: *const blpapi_Element_t,
        streamWriter: blpapi_StreamWriter_t,
        stream: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        spacesPerLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getElementAt(
        element: *const blpapi_Element_t,
        result: *mut *mut blpapi_Element_t,
        position: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getElement(
        element: *const blpapi_Element_t,
        result: *mut *mut blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_hasElement(
        element: *const blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_hasElementEx(
        element: *const blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        excludeNullElements: ::std::os::raw::c_int,
        reserved: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getValueAsBool(
        element: *const blpapi_Element_t,
        buffer: *mut blpapi_Bool_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getValueAsChar(
        element: *const blpapi_Element_t,
        buffer: *mut blpapi_Char_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getValueAsInt32(
        element: *const blpapi_Element_t,
        buffer: *mut blpapi_Int32_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getValueAsInt64(
        element: *const blpapi_Element_t,
        buffer: *mut blpapi_Int64_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getValueAsFloat32(
        element: *const blpapi_Element_t,
        buffer: *mut blpapi_Float32_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getValueAsFloat64(
        element: *const blpapi_Element_t,
        buffer: *mut blpapi_Float64_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getValueAsString(
        element: *const blpapi_Element_t,
        buffer: *mut *const ::std::os::raw::c_char,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getValueAsDatetime(
        element: *const blpapi_Element_t,
        buffer: *mut blpapi_Datetime_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getValueAsHighPrecisionDatetime(
        element: *const blpapi_Element_t,
        buffer: *mut blpapi_HighPrecisionDatetime_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getValueAsElement(
        element: *const blpapi_Element_t,
        buffer: *mut *mut blpapi_Element_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getValueAsName(
        element: *const blpapi_Element_t,
        buffer: *mut *mut blpapi_Name_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_getChoice(
        element: *const blpapi_Element_t,
        result: *mut *mut blpapi_Element_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setValueBool(
        element: *mut blpapi_Element_t,
        value: blpapi_Bool_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setValueChar(
        element: *mut blpapi_Element_t,
        value: blpapi_Char_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setValueInt32(
        element: *mut blpapi_Element_t,
        value: blpapi_Int32_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setValueInt64(
        element: *mut blpapi_Element_t,
        value: blpapi_Int64_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setValueFloat32(
        element: *mut blpapi_Element_t,
        value: blpapi_Float32_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setValueFloat64(
        element: *mut blpapi_Element_t,
        value: blpapi_Float64_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setValueString(
        element: *mut blpapi_Element_t,
        value: *const ::std::os::raw::c_char,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setValueDatetime(
        element: *mut blpapi_Element_t,
        value: *const blpapi_Datetime_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setValueHighPrecisionDatetime(
        element: *mut blpapi_Element_t,
        value: *const blpapi_HighPrecisionDatetime_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setValueFromElement(
        element: *mut blpapi_Element_t,
        value: *mut blpapi_Element_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setValueFromName(
        element: *mut blpapi_Element_t,
        value: *const blpapi_Name_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setElementBool(
        element: *mut blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        value: blpapi_Bool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setElementChar(
        element: *mut blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        value: blpapi_Char_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setElementInt32(
        element: *mut blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        value: blpapi_Int32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setElementInt64(
        element: *mut blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        value: blpapi_Int64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setElementFloat32(
        element: *mut blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        value: blpapi_Float32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setElementFloat64(
        element: *mut blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        value: blpapi_Float64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setElementString(
        element: *mut blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setElementDatetime(
        element: *mut blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        value: *const blpapi_Datetime_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setElementHighPrecisionDatetime(
        element: *mut blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        value: *const blpapi_HighPrecisionDatetime_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setElementFromField(
        element: *mut blpapi_Element_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        sourcebuffer: *mut blpapi_Element_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setElementFromName(
        element: *mut blpapi_Element_t,
        elementName: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        buffer: *const blpapi_Name_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_appendElement(
        element: *mut blpapi_Element_t,
        appendedElement: *mut *mut blpapi_Element_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Element_setChoice(
        element: *mut blpapi_Element_t,
        resultElement: *mut *mut blpapi_Element_t,
        nameCstr: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Request {
    _unused: [u8; 0],
}
pub type blpapi_Request_t = blpapi_Request;
extern "C" {
    pub fn blpapi_Request_destroy(request: *mut blpapi_Request_t);
}
extern "C" {
    pub fn blpapi_Request_elements(request: *mut blpapi_Request_t) -> *mut blpapi_Element_t;
}
extern "C" {
    pub fn blpapi_Request_setPreferredRoute(
        request: *mut blpapi_Request_t,
        correlationId: *mut blpapi_CorrelationId_t,
    );
}
extern "C" {
    pub fn blpapi_Operation_name(service: *mut blpapi_Operation_t)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_Operation_description(
        service: *mut blpapi_Operation_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_Operation_requestDefinition(
        service: *mut blpapi_Operation_t,
        requestDefinition: *mut *mut blpapi_SchemaElementDefinition_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Operation_numResponseDefinitions(
        service: *mut blpapi_Operation_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Operation_responseDefinition(
        service: *mut blpapi_Operation_t,
        responseDefinition: *mut *mut blpapi_SchemaElementDefinition_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_name(service: *mut blpapi_Service_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_Service_description(
        service: *mut blpapi_Service_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_Service_numOperations(service: *mut blpapi_Service_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_numEventDefinitions(
        service: *mut blpapi_Service_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_addRef(service: *mut blpapi_Service_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_release(service: *mut blpapi_Service_t);
}
extern "C" {
    pub fn blpapi_Service_authorizationServiceName(
        service: *mut blpapi_Service_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_Service_getOperation(
        service: *mut blpapi_Service_t,
        operation: *mut *mut blpapi_Operation_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_getOperationAt(
        service: *mut blpapi_Service_t,
        operation: *mut *mut blpapi_Operation_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_getEventDefinition(
        service: *mut blpapi_Service_t,
        result: *mut *mut blpapi_SchemaElementDefinition_t,
        nameString: *const ::std::os::raw::c_char,
        name: *const blpapi_Name_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_getEventDefinitionAt(
        service: *mut blpapi_Service_t,
        result: *mut *mut blpapi_SchemaElementDefinition_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_createRequest(
        service: *mut blpapi_Service_t,
        request: *mut *mut blpapi_Request_t,
        operation: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_createAuthorizationRequest(
        service: *mut blpapi_Service_t,
        request: *mut *mut blpapi_Request_t,
        operation: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_createPublishEvent(
        service: *mut blpapi_Service_t,
        event: *mut *mut blpapi_Event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_createAdminEvent(
        service: *mut blpapi_Service_t,
        event: *mut *mut blpapi_Event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_createResponseEvent(
        service: *mut blpapi_Service_t,
        correlationId: *const blpapi_CorrelationId_t,
        event: *mut *mut blpapi_Event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Service_print(
        service: *const blpapi_Service_t,
        streamWriter: blpapi_StreamWriter_t,
        stream: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        spacesPerLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Message {
    _unused: [u8; 0],
}
pub type blpapi_Message_t = blpapi_Message;
extern "C" {
    pub fn blpapi_Message_messageType(message: *const blpapi_Message_t) -> *mut blpapi_Name_t;
}
extern "C" {
    pub fn blpapi_Message_typeString(
        message: *const blpapi_Message_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_Message_topicName(
        message: *const blpapi_Message_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_Message_service(message: *const blpapi_Message_t) -> *mut blpapi_Service_t;
}
extern "C" {
    pub fn blpapi_Message_numCorrelationIds(
        message: *const blpapi_Message_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Message_correlationId(
        message: *const blpapi_Message_t,
        index: usize,
    ) -> blpapi_CorrelationId_t;
}
extern "C" {
    pub fn blpapi_Message_elements(message: *const blpapi_Message_t) -> *mut blpapi_Element_t;
}
extern "C" {
    pub fn blpapi_Message_privateData(
        message: *const blpapi_Message_t,
        size: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_Message_fragmentType(message: *const blpapi_Message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Message_recapType(message: *const blpapi_Message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Message_print(
        message: *const blpapi_Message_t,
        streamWriter: blpapi_StreamWriter_t,
        stream: *mut ::std::os::raw::c_void,
        indentLevel: ::std::os::raw::c_int,
        spacesPerLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Message_addRef(message: *const blpapi_Message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Message_release(message: *const blpapi_Message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Message_timeReceived(
        message: *const blpapi_Message_t,
        timeReceived: *mut blpapi_TimePoint_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Event_eventType(event: *const blpapi_Event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Event_addRef(event: *const blpapi_Event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Event_release(event: *const blpapi_Event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventQueue_create() -> *mut blpapi_EventQueue_t;
}
extern "C" {
    pub fn blpapi_EventQueue_destroy(eventQueue: *mut blpapi_EventQueue_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventQueue_nextEvent(
        eventQueue: *mut blpapi_EventQueue_t,
        timeout: ::std::os::raw::c_int,
    ) -> *mut blpapi_Event_t;
}
extern "C" {
    pub fn blpapi_EventQueue_purge(eventQueue: *mut blpapi_EventQueue_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventQueue_tryNextEvent(
        eventQueue: *mut blpapi_EventQueue_t,
        eventPointer: *mut *mut blpapi_Event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_MessageIterator_create(
        event: *const blpapi_Event_t,
    ) -> *mut blpapi_MessageIterator_t;
}
extern "C" {
    pub fn blpapi_MessageIterator_destroy(iterator: *mut blpapi_MessageIterator_t);
}
extern "C" {
    pub fn blpapi_MessageIterator_next(
        iterator: *mut blpapi_MessageIterator_t,
        result: *mut *mut blpapi_Message_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventDispatcher_create(
        numDispatcherThreads: usize,
    ) -> *mut blpapi_EventDispatcher_t;
}
extern "C" {
    pub fn blpapi_EventDispatcher_destroy(handle: *mut blpapi_EventDispatcher_t);
}
extern "C" {
    pub fn blpapi_EventDispatcher_start(
        handle: *mut blpapi_EventDispatcher_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventDispatcher_stop(
        handle: *mut blpapi_EventDispatcher_t,
        async_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventDispatcher_dispatchEvents(
        handle: *mut blpapi_EventDispatcher_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Identity_release(handle: *mut blpapi_Identity_t);
}
extern "C" {
    pub fn blpapi_Identity_addRef(handle: *mut blpapi_Identity_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Identity_hasEntitlements(
        handle: *const blpapi_Identity_t,
        service: *const blpapi_Service_t,
        eidElement: *const blpapi_Element_t,
        entitlementIds: *const ::std::os::raw::c_int,
        numEntitlements: usize,
        failedEntitlements: *mut ::std::os::raw::c_int,
        failedEntitlementsCount: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Identity_isAuthorized(
        handle: *const blpapi_Identity_t,
        service: *const blpapi_Service_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Identity_getSeatType(
        handle: *const blpapi_Identity_t,
        seatType: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_UserHandle_release(handle: *mut blpapi_UserHandle_t);
}
extern "C" {
    pub fn blpapi_UserHandle_addRef(handle: *mut blpapi_UserHandle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_UserHandle_hasEntitlements(
        handle: *const blpapi_UserHandle_t,
        service: *const blpapi_Service_t,
        eidElement: *const blpapi_Element_t,
        entitlementIds: *const ::std::os::raw::c_int,
        numEntitlements: usize,
        failedEntitlements: *mut ::std::os::raw::c_int,
        failedEntitlementsCount: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_AbstractSession_cancel(
        session: *mut blpapi_AbstractSession_t,
        correlationIds: *const blpapi_CorrelationId_t,
        numCorrelationIds: usize,
        requestLabel: *const ::std::os::raw::c_char,
        requestLabelLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_AbstractSession_sendAuthorizationRequest(
        session: *mut blpapi_AbstractSession_t,
        request: *const blpapi_Request_t,
        identity: *mut blpapi_Identity_t,
        correlationId: *mut blpapi_CorrelationId_t,
        eventQueue: *mut blpapi_EventQueue_t,
        requestLabel: *const ::std::os::raw::c_char,
        requestLabelLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_AbstractSession_openService(
        session: *mut blpapi_AbstractSession_t,
        serviceIdentifier: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_AbstractSession_openServiceAsync(
        session: *mut blpapi_AbstractSession_t,
        serviceIdentifier: *const ::std::os::raw::c_char,
        correlationId: *mut blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_AbstractSession_generateToken(
        session: *mut blpapi_AbstractSession_t,
        correlationId: *mut blpapi_CorrelationId_t,
        eventQueue: *mut blpapi_EventQueue_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_AbstractSession_generateManualToken(
        session: *mut blpapi_AbstractSession_t,
        correlationId: *mut blpapi_CorrelationId_t,
        user: *const ::std::os::raw::c_char,
        manualIp: *const ::std::os::raw::c_char,
        eventQueue: *mut blpapi_EventQueue_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_AbstractSession_getService(
        session: *mut blpapi_AbstractSession_t,
        service: *mut *mut blpapi_Service_t,
        serviceIdentifier: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_AbstractSession_createIdentity(
        session: *mut blpapi_AbstractSession_t,
    ) -> *mut blpapi_Identity_t;
}
pub type blpapi_Logging_Func_t = ::std::option::Option<
    unsafe extern "C" fn(
        threadId: blpapi_UInt64_t,
        severity: ::std::os::raw::c_int,
        timestamp: blpapi_Datetime_t,
        category: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn blpapi_Logging_registerCallback(
        callback: blpapi_Logging_Func_t,
        thresholdSeverity: blpapi_Logging_Severity_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Logging_logTestMessage(severity: blpapi_Logging_Severity_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_ResolutionList {
    _unused: [u8; 0],
}
pub type blpapi_ResolutionList_t = blpapi_ResolutionList;
extern "C" {
    pub fn blpapi_ResolutionList_extractAttributeFromResolutionSuccess(
        message: *const blpapi_Message_t,
        attribute: *const blpapi_Name_t,
    ) -> *mut blpapi_Element_t;
}
extern "C" {
    pub fn blpapi_ResolutionList_create(
        from: *mut blpapi_ResolutionList_t,
    ) -> *mut blpapi_ResolutionList_t;
}
extern "C" {
    pub fn blpapi_ResolutionList_destroy(list: *mut blpapi_ResolutionList_t);
}
extern "C" {
    pub fn blpapi_ResolutionList_add(
        list: *mut blpapi_ResolutionList_t,
        topic: *const ::std::os::raw::c_char,
        correlationId: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_addFromMessage(
        list: *mut blpapi_ResolutionList_t,
        topic: *const blpapi_Message_t,
        correlationId: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_addAttribute(
        list: *mut blpapi_ResolutionList_t,
        name: *const blpapi_Name_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_correlationIdAt(
        list: *const blpapi_ResolutionList_t,
        result: *mut blpapi_CorrelationId_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_topicString(
        list: *const blpapi_ResolutionList_t,
        topic: *mut *const ::std::os::raw::c_char,
        id: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_topicStringAt(
        list: *const blpapi_ResolutionList_t,
        topic: *mut *const ::std::os::raw::c_char,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_status(
        list: *const blpapi_ResolutionList_t,
        status: *mut ::std::os::raw::c_int,
        id: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_statusAt(
        list: *const blpapi_ResolutionList_t,
        status: *mut ::std::os::raw::c_int,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_attribute(
        list: *const blpapi_ResolutionList_t,
        element: *mut *mut blpapi_Element_t,
        attribute: *const blpapi_Name_t,
        id: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_attributeAt(
        list: *const blpapi_ResolutionList_t,
        element: *mut *mut blpapi_Element_t,
        attribute: *const blpapi_Name_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_message(
        list: *const blpapi_ResolutionList_t,
        element: *mut *mut blpapi_Message_t,
        id: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_messageAt(
        list: *const blpapi_ResolutionList_t,
        element: *mut *mut blpapi_Message_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ResolutionList_size(
        list: *const blpapi_ResolutionList_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_TopicList {
    _unused: [u8; 0],
}
pub type blpapi_TopicList_t = blpapi_TopicList;
extern "C" {
    pub fn blpapi_TopicList_create(from: *mut blpapi_TopicList_t) -> *mut blpapi_TopicList_t;
}
extern "C" {
    pub fn blpapi_TopicList_destroy(list: *mut blpapi_TopicList_t);
}
extern "C" {
    pub fn blpapi_TopicList_add(
        list: *mut blpapi_TopicList_t,
        topic: *const ::std::os::raw::c_char,
        correlationId: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_TopicList_addFromMessage(
        list: *mut blpapi_TopicList_t,
        topic: *const blpapi_Message_t,
        correlationId: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_TopicList_correlationIdAt(
        list: *const blpapi_TopicList_t,
        result: *mut blpapi_CorrelationId_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_TopicList_topicString(
        list: *const blpapi_TopicList_t,
        topic: *mut *const ::std::os::raw::c_char,
        id: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_TopicList_topicStringAt(
        list: *const blpapi_TopicList_t,
        topic: *mut *const ::std::os::raw::c_char,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_TopicList_status(
        list: *const blpapi_TopicList_t,
        status: *mut ::std::os::raw::c_int,
        id: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_TopicList_statusAt(
        list: *const blpapi_TopicList_t,
        status: *mut ::std::os::raw::c_int,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_TopicList_message(
        list: *const blpapi_TopicList_t,
        element: *mut *mut blpapi_Message_t,
        id: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_TopicList_messageAt(
        list: *const blpapi_TopicList_t,
        element: *mut *mut blpapi_Message_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_TopicList_size(list: *const blpapi_TopicList_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_RequestTemplate_addRef(
        requestTemplate: *const blpapi_RequestTemplate_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_RequestTemplate_release(
        requestTemplate: *const blpapi_RequestTemplate_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_TlsOptions_create() -> *mut blpapi_TlsOptions_t;
}
extern "C" {
    pub fn blpapi_TlsOptions_duplicate(
        parameters: *const blpapi_TlsOptions_t,
    ) -> *mut blpapi_TlsOptions_t;
}
extern "C" {
    pub fn blpapi_TlsOptions_copy(lhs: *mut blpapi_TlsOptions_t, rhs: *const blpapi_TlsOptions_t);
}
extern "C" {
    pub fn blpapi_TlsOptions_destroy(parameters: *mut blpapi_TlsOptions_t);
}
extern "C" {
    pub fn blpapi_TlsOptions_createFromFiles(
        clientCredentialsFileName: *const ::std::os::raw::c_char,
        clientCredentialsPassword: *const ::std::os::raw::c_char,
        trustedCertificatesFileName: *const ::std::os::raw::c_char,
    ) -> *mut blpapi_TlsOptions_t;
}
extern "C" {
    pub fn blpapi_TlsOptions_createFromBlobs(
        clientCredentialsRawData: *const ::std::os::raw::c_char,
        clientCredentialsRawDataLength: ::std::os::raw::c_int,
        clientCredentialsPassword: *const ::std::os::raw::c_char,
        trustedCertificatesRawData: *const ::std::os::raw::c_char,
        trustedCertificatesRawDataLength: ::std::os::raw::c_int,
    ) -> *mut blpapi_TlsOptions_t;
}
extern "C" {
    pub fn blpapi_TlsOptions_setTlsHandshakeTimeoutMs(
        paramaters: *mut blpapi_TlsOptions_t,
        tlsHandshakeTimeoutMs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blpapi_TlsOptions_setCrlFetchTimeoutMs(
        paramaters: *mut blpapi_TlsOptions_t,
        crlFetchTimeoutMs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_create() -> *mut blpapi_SessionOptions_t;
}
extern "C" {
    pub fn blpapi_SessionOptions_duplicate(
        parameters: *const blpapi_SessionOptions_t,
    ) -> *mut blpapi_SessionOptions_t;
}
extern "C" {
    pub fn blpapi_SessionOptions_copy(
        lhs: *mut blpapi_SessionOptions_t,
        rhs: *const blpapi_SessionOptions_t,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_destroy(parameters: *mut blpapi_SessionOptions_t);
}
extern "C" {
    pub fn blpapi_SessionOptions_setServerHost(
        parameters: *mut blpapi_SessionOptions_t,
        serverHost: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setServerPort(
        parameters: *mut blpapi_SessionOptions_t,
        serverPort: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setServerAddress(
        parameters: *mut blpapi_SessionOptions_t,
        serverHost: *const ::std::os::raw::c_char,
        serverPort: ::std::os::raw::c_ushort,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_removeServerAddress(
        parameters: *mut blpapi_SessionOptions_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setConnectTimeout(
        parameters: *mut blpapi_SessionOptions_t,
        timeoutInMilliseconds: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setDefaultServices(
        parameters: *mut blpapi_SessionOptions_t,
        defaultServices: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setDefaultSubscriptionService(
        parameters: *mut blpapi_SessionOptions_t,
        serviceIdentifier: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setDefaultTopicPrefix(
        parameters: *mut blpapi_SessionOptions_t,
        prefix: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_setAllowMultipleCorrelatorsPerMsg(
        parameters: *mut blpapi_SessionOptions_t,
        allowMultipleCorrelatorsPerMsg: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_setClientMode(
        parameters: *mut blpapi_SessionOptions_t,
        clientMode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_setMaxPendingRequests(
        parameters: *mut blpapi_SessionOptions_t,
        maxPendingRequests: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_setAutoRestartOnDisconnection(
        parameters: *mut blpapi_SessionOptions_t,
        autoRestart: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_setAutoRestart(
        parameters: *mut blpapi_SessionOptions_t,
        autoRestart: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_setAuthenticationOptions(
        parameters: *mut blpapi_SessionOptions_t,
        authOptions: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_setNumStartAttempts(
        parameters: *mut blpapi_SessionOptions_t,
        numStartAttempts: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_setMaxEventQueueSize(
        parameters: *mut blpapi_SessionOptions_t,
        maxEventQueueSize: usize,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_setSlowConsumerWarningHiWaterMark(
        parameters: *mut blpapi_SessionOptions_t,
        hiWaterMark: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setSlowConsumerWarningLoWaterMark(
        parameters: *mut blpapi_SessionOptions_t,
        loWaterMark: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setDefaultKeepAliveInactivityTime(
        parameters: *mut blpapi_SessionOptions_t,
        inactivityMsecs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setDefaultKeepAliveResponseTimeout(
        parameters: *mut blpapi_SessionOptions_t,
        timeoutMsecs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setKeepAliveEnabled(
        parameters: *mut blpapi_SessionOptions_t,
        isEnabled: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setRecordSubscriptionDataReceiveTimes(
        parameters: *mut blpapi_SessionOptions_t,
        shouldRecord: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_setServiceCheckTimeout(
        paramaters: *mut blpapi_SessionOptions_t,
        timeoutMsecs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setServiceDownloadTimeout(
        paramaters: *mut blpapi_SessionOptions_t,
        timeoutMsecs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_setTlsOptions(
        paramaters: *mut blpapi_SessionOptions_t,
        tlsOptions: *const blpapi_TlsOptions_t,
    );
}
extern "C" {
    pub fn blpapi_SessionOptions_setFlushPublishedEventsTimeout(
        paramaters: *mut blpapi_SessionOptions_t,
        timeoutMsecs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_serverHost(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_SessionOptions_serverPort(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn blpapi_SessionOptions_numServerAddresses(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_getServerAddress(
        parameters: *mut blpapi_SessionOptions_t,
        serverHost: *mut *const ::std::os::raw::c_char,
        serverPort: *mut ::std::os::raw::c_ushort,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_connectTimeout(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn blpapi_SessionOptions_defaultServices(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_SessionOptions_defaultSubscriptionService(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_SessionOptions_defaultTopicPrefix(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_SessionOptions_allowMultipleCorrelatorsPerMsg(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_clientMode(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_maxPendingRequests(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_autoRestartOnDisconnection(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_autoRestart(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_authenticationOptions(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blpapi_SessionOptions_numStartAttempts(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_maxEventQueueSize(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> usize;
}
extern "C" {
    pub fn blpapi_SessionOptions_slowConsumerWarningHiWaterMark(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> f32;
}
extern "C" {
    pub fn blpapi_SessionOptions_slowConsumerWarningLoWaterMark(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> f32;
}
extern "C" {
    pub fn blpapi_SessionOptions_defaultKeepAliveInactivityTime(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_defaultKeepAliveResponseTimeout(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_keepAliveEnabled(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_recordSubscriptionDataReceiveTimes(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_serviceCheckTimeout(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_serviceDownloadTimeout(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_print(
        parameters: *mut blpapi_SessionOptions_t,
        streamWriter: blpapi_StreamWriter_t,
        stream: *mut ::std::os::raw::c_void,
        indentLevel: ::std::os::raw::c_int,
        spacesPerLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SessionOptions_flushPublishedEventsTimeout(
        parameters: *mut blpapi_SessionOptions_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_SubscriptionList {
    _unused: [u8; 0],
}
pub type blpapi_SubscriptionList_t = blpapi_SubscriptionList;
extern "C" {
    pub fn blpapi_SubscriptionList_create() -> *mut blpapi_SubscriptionList_t;
}
extern "C" {
    pub fn blpapi_SubscriptionList_destroy(list: *mut blpapi_SubscriptionList_t);
}
extern "C" {
    pub fn blpapi_SubscriptionList_add(
        list: *mut blpapi_SubscriptionList_t,
        subscriptionString: *const ::std::os::raw::c_char,
        correlationId: *const blpapi_CorrelationId_t,
        fields: *mut *const ::std::os::raw::c_char,
        options: *mut *const ::std::os::raw::c_char,
        numfields: usize,
        numOptions: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SubscriptionList_addResolved(
        list: *mut blpapi_SubscriptionList_t,
        subscriptionString: *const ::std::os::raw::c_char,
        correlationId: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SubscriptionList_clear(
        list: *mut blpapi_SubscriptionList_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SubscriptionList_append(
        dest: *mut blpapi_SubscriptionList_t,
        src: *const blpapi_SubscriptionList_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SubscriptionList_size(
        list: *const blpapi_SubscriptionList_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SubscriptionList_correlationIdAt(
        list: *const blpapi_SubscriptionList_t,
        result: *mut blpapi_CorrelationId_t,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SubscriptionList_topicStringAt(
        list: *mut blpapi_SubscriptionList_t,
        result: *mut *const ::std::os::raw::c_char,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SubscriptionList_isResolvedAt(
        list: *mut blpapi_SubscriptionList_t,
        result: *mut ::std::os::raw::c_int,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
pub type blpapi_EventHandler_t = ::std::option::Option<
    unsafe extern "C" fn(
        event: *mut blpapi_Event_t,
        session: *mut blpapi_Session_t,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn blpapi_Session_create(
        parameters: *mut blpapi_SessionOptions_t,
        handler: blpapi_EventHandler_t,
        dispatcher: *mut blpapi_EventDispatcher_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut blpapi_Session_t;
}
extern "C" {
    pub fn blpapi_Session_destroy(session: *mut blpapi_Session_t);
}
extern "C" {
    pub fn blpapi_Session_start(session: *mut blpapi_Session_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_startAsync(session: *mut blpapi_Session_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_stop(session: *mut blpapi_Session_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_stopAsync(session: *mut blpapi_Session_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_nextEvent(
        session: *mut blpapi_Session_t,
        eventPointer: *mut *mut blpapi_Event_t,
        timeoutInMilliseconds: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_tryNextEvent(
        session: *mut blpapi_Session_t,
        eventPointer: *mut *mut blpapi_Event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_subscribe(
        session: *mut blpapi_Session_t,
        subscriptionList: *const blpapi_SubscriptionList_t,
        handle: *const blpapi_Identity_t,
        requestLabel: *const ::std::os::raw::c_char,
        requestLabelLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_resubscribe(
        session: *mut blpapi_Session_t,
        resubscriptionList: *const blpapi_SubscriptionList_t,
        requestLabel: *const ::std::os::raw::c_char,
        requestLabelLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_resubscribeWithId(
        session: *mut blpapi_Session_t,
        resubscriptionList: *const blpapi_SubscriptionList_t,
        resubscriptionId: ::std::os::raw::c_int,
        requestLabel: *const ::std::os::raw::c_char,
        requestLabelLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_unsubscribe(
        session: *mut blpapi_Session_t,
        unsubscriptionList: *const blpapi_SubscriptionList_t,
        requestLabel: *const ::std::os::raw::c_char,
        requestLabelLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_cancel(
        session: *mut blpapi_Session_t,
        correlationIds: *const blpapi_CorrelationId_t,
        numCorrelationIds: usize,
        requestLabel: *const ::std::os::raw::c_char,
        requestLabelLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_setStatusCorrelationId(
        session: *mut blpapi_Session_t,
        service: *const blpapi_Service_t,
        identity: *const blpapi_Identity_t,
        correlationId: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_sendRequest(
        session: *mut blpapi_Session_t,
        request: *const blpapi_Request_t,
        correlationId: *mut blpapi_CorrelationId_t,
        identity: *mut blpapi_Identity_t,
        eventQueue: *mut blpapi_EventQueue_t,
        requestLabel: *const ::std::os::raw::c_char,
        requestLabelLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_sendRequestTemplate(
        session: *mut blpapi_Session_t,
        requestTemplate: *const blpapi_RequestTemplate_t,
        correlationId: *mut blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_createSnapshotRequestTemplate(
        requestTemplate: *mut *mut blpapi_RequestTemplate_t,
        session: *mut blpapi_Session_t,
        subscriptionString: *const ::std::os::raw::c_char,
        identity: *const blpapi_Identity_t,
        correlationId: *mut blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_sendAuthorizationRequest(
        session: *mut blpapi_Session_t,
        request: *const blpapi_Request_t,
        identity: *mut blpapi_Identity_t,
        correlationId: *mut blpapi_CorrelationId_t,
        eventQueue: *mut blpapi_EventQueue_t,
        requestLabel: *const ::std::os::raw::c_char,
        requestLabelLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_openService(
        session: *mut blpapi_Session_t,
        serviceName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_openServiceAsync(
        session: *mut blpapi_Session_t,
        serviceName: *const ::std::os::raw::c_char,
        correlationId: *mut blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_generateToken(
        session: *mut blpapi_Session_t,
        correlationId: *mut blpapi_CorrelationId_t,
        eventQueue: *mut blpapi_EventQueue_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_getService(
        session: *mut blpapi_Session_t,
        service: *mut *mut blpapi_Service_t,
        serviceName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Session_createUserHandle(
        session: *mut blpapi_Session_t,
    ) -> *mut blpapi_UserHandle_t;
}
extern "C" {
    pub fn blpapi_Session_createIdentity(session: *mut blpapi_Session_t) -> *mut blpapi_Identity_t;
}
extern "C" {
    pub fn blpapi_Session_getAbstractSession(
        session: *mut blpapi_Session_t,
    ) -> *mut blpapi_AbstractSession_t;
}
extern "C" {
    pub fn blpapi_SubscriptionItr_create(
        session: *mut blpapi_Session_t,
    ) -> *mut blpapi_SubscriptionIterator_t;
}
extern "C" {
    pub fn blpapi_SubscriptionItr_destroy(iterator: *mut blpapi_SubscriptionIterator_t);
}
extern "C" {
    pub fn blpapi_SubscriptionItr_next(
        iterator: *mut blpapi_SubscriptionIterator_t,
        subscriptionString: *mut *const ::std::os::raw::c_char,
        correlationId: *mut blpapi_CorrelationId_t,
        status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_SubscriptionItr_isValid(
        iterator: *const blpapi_SubscriptionIterator_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_getVersionInfo(
        majorVersion: *mut ::std::os::raw::c_int,
        minorVersion: *mut ::std::os::raw::c_int,
        patchVersion: *mut ::std::os::raw::c_int,
        buildVersion: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blpapi_getVersionIdentifier() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_Topic {
    _unused: [u8; 0],
}
pub type blpapi_Topic_t = blpapi_Topic;
extern "C" {
    pub fn blpapi_Topic_create(from: *mut blpapi_Topic_t) -> *mut blpapi_Topic_t;
}
extern "C" {
    pub fn blpapi_Topic_destroy(victim: *mut blpapi_Topic_t);
}
extern "C" {
    pub fn blpapi_Topic_compare(
        lhs: *const blpapi_Topic_t,
        rhs: *const blpapi_Topic_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_Topic_service(topic: *const blpapi_Topic_t) -> *mut blpapi_Service_t;
}
extern "C" {
    pub fn blpapi_Topic_isActive(topic: *const blpapi_Topic_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blpapi_ServiceRegistrationOptions {
    _unused: [u8; 0],
}
pub type blpapi_ServiceRegistrationOptions_t = blpapi_ServiceRegistrationOptions;
pub type blpapi_ProviderEventHandler_t = ::std::option::Option<
    unsafe extern "C" fn(
        event: *mut blpapi_Event_t,
        session: *mut blpapi_ProviderSession_t,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn blpapi_ProviderSession_create(
        parameters: *mut blpapi_SessionOptions_t,
        handler: blpapi_ProviderEventHandler_t,
        dispatcher: *mut blpapi_EventDispatcher_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> *mut blpapi_ProviderSession_t;
}
extern "C" {
    pub fn blpapi_ProviderSession_destroy(session: *mut blpapi_ProviderSession_t);
}
extern "C" {
    pub fn blpapi_ProviderSession_start(
        session: *mut blpapi_ProviderSession_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_startAsync(
        session: *mut blpapi_ProviderSession_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_stop(
        session: *mut blpapi_ProviderSession_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_stopAsync(
        session: *mut blpapi_ProviderSession_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_nextEvent(
        session: *mut blpapi_ProviderSession_t,
        eventPointer: *mut *mut blpapi_Event_t,
        timeoutInMilliseconds: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_tryNextEvent(
        session: *mut blpapi_ProviderSession_t,
        eventPointer: *mut *mut blpapi_Event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_registerService(
        session: *mut blpapi_ProviderSession_t,
        serviceName: *const ::std::os::raw::c_char,
        identity: *const blpapi_Identity_t,
        registrationOptions: *mut blpapi_ServiceRegistrationOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_activateSubServiceCodeRange(
        session: *mut blpapi_ProviderSession_t,
        serviceName: *const ::std::os::raw::c_char,
        begin: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_deactivateSubServiceCodeRange(
        session: *mut blpapi_ProviderSession_t,
        serviceName: *const ::std::os::raw::c_char,
        begin: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_registerServiceAsync(
        session: *mut blpapi_ProviderSession_t,
        serviceName: *const ::std::os::raw::c_char,
        identity: *const blpapi_Identity_t,
        correlationId: *mut blpapi_CorrelationId_t,
        registrationOptions: *mut blpapi_ServiceRegistrationOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_deregisterService(
        session: *mut blpapi_ProviderSession_t,
        serviceName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_resolve(
        session: *mut blpapi_ProviderSession_t,
        resolutionList: *mut blpapi_ResolutionList_t,
        resolveMode: ::std::os::raw::c_int,
        identity: *const blpapi_Identity_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_resolveAsync(
        session: *mut blpapi_ProviderSession_t,
        resolutionList: *const blpapi_ResolutionList_t,
        resolveMode: ::std::os::raw::c_int,
        identity: *const blpapi_Identity_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_createTopics(
        session: *mut blpapi_ProviderSession_t,
        topicList: *mut blpapi_TopicList_t,
        resolveMode: ::std::os::raw::c_int,
        identity: *const blpapi_Identity_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_createTopicsAsync(
        session: *mut blpapi_ProviderSession_t,
        topicList: *const blpapi_TopicList_t,
        resolveMode: ::std::os::raw::c_int,
        identity: *const blpapi_Identity_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_getTopic(
        session: *mut blpapi_ProviderSession_t,
        message: *const blpapi_Message_t,
        topic: *mut *mut blpapi_Topic_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_createTopic(
        session: *mut blpapi_ProviderSession_t,
        message: *const blpapi_Message_t,
        topic: *mut *mut blpapi_Topic_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_createServiceStatusTopic(
        session: *mut blpapi_ProviderSession_t,
        service: *const blpapi_Service_t,
        topic: *mut *mut blpapi_Topic_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_deleteTopics(
        session: *mut blpapi_ProviderSession_t,
        topics: *mut *const blpapi_Topic_t,
        numTopics: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_terminateSubscriptionsOnTopics(
        session: *mut blpapi_ProviderSession_t,
        topics: *mut *const blpapi_Topic_t,
        numTopics: usize,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_publish(
        session: *mut blpapi_ProviderSession_t,
        event: *mut blpapi_Event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_sendResponse(
        session: *mut blpapi_ProviderSession_t,
        event: *mut blpapi_Event_t,
        isPartialResponse: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ProviderSession_getAbstractSession(
        session: *mut blpapi_ProviderSession_t,
    ) -> *mut blpapi_AbstractSession_t;
}
extern "C" {
    pub fn blpapi_ProviderSession_flushPublishedEvents(
        session: *mut blpapi_ProviderSession_t,
        allFlushed: *mut ::std::os::raw::c_int,
        timeoutMsecs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_create() -> *mut blpapi_ServiceRegistrationOptions_t;
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_duplicate(
        parameters: *const blpapi_ServiceRegistrationOptions_t,
    ) -> *mut blpapi_ServiceRegistrationOptions_t;
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_destroy(
        parameters: *mut blpapi_ServiceRegistrationOptions_t,
    );
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_copy(
        lhs: *mut blpapi_ServiceRegistrationOptions_t,
        rhs: *const blpapi_ServiceRegistrationOptions_t,
    );
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_addActiveSubServiceCodeRange(
        parameters: *mut blpapi_ServiceRegistrationOptions_t,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_removeAllActiveSubServiceCodeRanges(
        parameters: *mut blpapi_ServiceRegistrationOptions_t,
    );
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_setGroupId(
        parameters: *mut blpapi_ServiceRegistrationOptions_t,
        groupId: *const ::std::os::raw::c_char,
        groupIdLength: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_setServicePriority(
        parameters: *mut blpapi_ServiceRegistrationOptions_t,
        priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_setPartsToRegister(
        parameters: *mut blpapi_ServiceRegistrationOptions_t,
        parts: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_getGroupId(
        parameters: *mut blpapi_ServiceRegistrationOptions_t,
        groupdIdBuffer: *mut ::std::os::raw::c_char,
        groupIdLength: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_getServicePriority(
        parameters: *mut blpapi_ServiceRegistrationOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_ServiceRegistrationOptions_getPartsToRegister(
        parameters: *mut blpapi_ServiceRegistrationOptions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_create(event: *mut blpapi_Event_t)
        -> *mut blpapi_EventFormatter_t;
}
extern "C" {
    pub fn blpapi_EventFormatter_destroy(victim: *mut blpapi_EventFormatter_t);
}
extern "C" {
    pub fn blpapi_EventFormatter_appendMessage(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *mut blpapi_Name_t,
        topic: *const blpapi_Topic_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendMessageSeq(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *mut blpapi_Name_t,
        topic: *const blpapi_Topic_t,
        sequenceNumber: ::std::os::raw::c_uint,
        arg1: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendResponse(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *mut blpapi_Name_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendRecapMessage(
        formatter: *mut blpapi_EventFormatter_t,
        topic: *const blpapi_Topic_t,
        cid: *const blpapi_CorrelationId_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendRecapMessageSeq(
        formatter: *mut blpapi_EventFormatter_t,
        topic: *const blpapi_Topic_t,
        cid: *const blpapi_CorrelationId_t,
        sequenceNumber: ::std::os::raw::c_uint,
        arg1: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendFragmentedRecapMessage(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *mut blpapi_Name_t,
        topic: *const blpapi_Topic_t,
        cid: *const blpapi_CorrelationId_t,
        fragmentType: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendFragmentedRecapMessageSeq(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *mut blpapi_Name_t,
        topic: *const blpapi_Topic_t,
        fragmentType: ::std::os::raw::c_int,
        sequenceNumber: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_setValueBool(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
        value: blpapi_Bool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_setValueChar(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
        value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_setValueInt32(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
        value: blpapi_Int32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_setValueInt64(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
        value: blpapi_Int64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_setValueFloat32(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
        value: blpapi_Float32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_setValueFloat64(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
        value: blpapi_Float64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_setValueDatetime(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
        value: *const blpapi_Datetime_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_setValueHighPrecisionDatetime(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
        value: *const blpapi_HighPrecisionDatetime_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_setValueString(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_setValueFromName(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
        value: *const blpapi_Name_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_setValueNull(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_pushElement(
        formatter: *mut blpapi_EventFormatter_t,
        typeString: *const ::std::os::raw::c_char,
        typeName: *const blpapi_Name_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_popElement(
        formatter: *mut blpapi_EventFormatter_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendValueBool(
        formatter: *mut blpapi_EventFormatter_t,
        value: blpapi_Bool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendValueChar(
        formatter: *mut blpapi_EventFormatter_t,
        value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendValueInt32(
        formatter: *mut blpapi_EventFormatter_t,
        value: blpapi_Int32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendValueInt64(
        formatter: *mut blpapi_EventFormatter_t,
        value: blpapi_Int64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendValueFloat32(
        formatter: *mut blpapi_EventFormatter_t,
        value: blpapi_Float32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendValueFloat64(
        formatter: *mut blpapi_EventFormatter_t,
        value: blpapi_Float64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendValueDatetime(
        formatter: *mut blpapi_EventFormatter_t,
        value: *const blpapi_Datetime_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendValueHighPrecisionDatetime(
        formatter: *mut blpapi_EventFormatter_t,
        value: *const blpapi_HighPrecisionDatetime_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendValueString(
        formatter: *mut blpapi_EventFormatter_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendValueFromName(
        formatter: *mut blpapi_EventFormatter_t,
        value: *const blpapi_Name_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_EventFormatter_appendElement(
        formatter: *mut blpapi_EventFormatter_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_DiagnosticsUtil_memoryInfo(
        buffer: *mut ::std::os::raw::c_char,
        bufferLength: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blpapi_HighResolutionClock_now(
        timePoint: *mut blpapi_TimePoint_t,
    ) -> ::std::os::raw::c_int;
}
